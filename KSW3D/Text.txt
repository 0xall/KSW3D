D3DXQUATERNION qRt, qvRt;
	D3DXMATRIX mRt, mvRt, mTrans;
	D3DXQUATERNION qcYaw, qcPitch, qcRoll;
	D3DXQUATERNION qtYaw, qtPitch, qtRoll;
	D3DXVECTOR3 vtYaw(0.0f, 1.0f, 0.0f), vtPitch(1.0f, 0.0f, 0.0f), vtRoll(0.0f, 0.0f, 1.0f);

	D3DXQuaternionRotationYawPitchRoll(&qRt, m_fYawAngle, m_fPitchAngle, m_fRollAngle);
	D3DXMatrixRotationQuaternion(&mRt, &qRt);

	D3DXQuaternionRotationYawPitchRoll(&qvRt, m_fvYawAngle, m_fvPitchAngle, m_fvRollAngle);
	D3DXMatrixRotationQuaternion(&mvRt, &qvRt);

	D3DXMatrixTranslation(&mTrans, m_vPos.x, m_vPos.y, m_vPos.z);

	/*D3DXVec3TransformCoord(&vtYaw, &vtYaw, &mRt);
	D3DXVec3TransformCoord(&vtPitch, &vtPitch, &mRt);
	D3DXVec3TransformCoord(&vtRoll, &vtRoll, &mRt);

	qcYaw = D3DXQUATERNION(m_vYaw.x, m_vYaw.y, m_vYaw.z, 1.0f);
	qcPitch = D3DXQUATERNION(m_vPitch.x, m_vPitch.y, m_vPitch.z, 1.0f);
	qcRoll = D3DXQUATERNION(m_vRoll.x, m_vRoll.y, m_vRoll.z, 1.0f);

	qtYaw = D3DXQUATERNION(vtYaw.x, vtYaw.y, vtYaw.z, 1.0f);
	qtPitch = D3DXQUATERNION(vtPitch.x, vtPitch.y, vtPitch.z, 1.0f);
	qtRoll = D3DXQUATERNION(vtRoll.x, vtRoll.y, vtRoll.z, 1.0f);

	D3DXQuaternionSlerp(&qcYaw, &qtYaw, &qcYaw, m_interpolation);
	D3DXQuaternionSlerp(&qcPitch, &qtPitch, &qcPitch, m_interpolation);
	D3DXQuaternionSlerp(&qcRoll, &qtRoll, &qcRoll, m_interpolation);

	m_vYaw = D3DXVECTOR3(qcYaw.x, qcYaw.y, qcYaw.z);
	m_vPitch = D3DXVECTOR3(qcPitch.x, qcPitch.y, qcPitch.z);
	m_vRoll = D3DXVECTOR3(qcRoll.x, qcRoll.y, qcRoll.z);
	D3DXVec3Normalize(&m_vYaw, &m_vYaw);
	D3DXVec3Normalize(&m_vPitch, &m_vPitch);
	D3DXVec3Normalize(&m_vRoll, &m_vRoll);*/

	/*D3DXMATRIX mMatrix;
	D3DXMatrixIdentity(&mMatrix);

	mMatrix._11 = m_vPitch.x;	mMatrix._12 = m_vPitch.y;	mMatrix._13 = m_vPitch.z;
	mMatrix._21 = m_vYaw.x;		mMatrix._22 = m_vYaw.y;		mMatrix._23 = m_vYaw.z;
	mMatrix._31 = m_vRoll.x;	mMatrix._32 = m_vRoll.y;	mMatrix._33 = m_vRoll.z;*/

	D3DXVECTOR3 vUp(0.0f, 1.0f, 0.0f);
	D3DXVec3TransformCoord(&m_vUp, &vUp, &mvRt);
	//D3DXVec3TransformCoord(&m_vUp, &m_vUp, &mMatrix);
	
	D3DXVec3TransformCoord(&m_vEye, &m_vDefaultEye, &mvRt);
	/*D3DXVec3TransformCoord(&m_vEye, &m_vEye, &mMatrix);*/
	D3DXVec3TransformCoord(&m_vEye, &m_vEye, &mTrans);

	D3DXVec3TransformCoord(&m_vAt, &m_vDefaultAt, &mvRt);
	/*D3DXVec3TransformCoord(&m_vAt, &m_vAt, &mMatrix);*/
	D3DXVec3TransformCoord(&m_vAt, &m_vAt, &mTrans);

	D3DXMatrixLookAtLH(&m_mView, &m_vEye, &m_vAt, &m_vUp);